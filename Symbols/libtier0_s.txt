
 B SteamThreadTools::g_SuspendResumeLock
 B SteamThreadTools::g_nCurThreadSuspendCount
 B SteamThreadTools::g_pCurThread
 B SteamVProf::CVProfNode::s_iCurrentUniqueNodeID
 B SteamVProf::g_mutexProfileDump
 B g_AllocTrackMutex
 B g_StackDumpMutex
 B g_TestHarness
 B g_VProfManager
 B g_VProfProfilesRunningCount
 B g_VProfile
 B g_bInException
 B g_mapAllocations
 B s_bInAssert
 CFDictionaryGetTypeID
 CFDictionaryGetValueIfPresent
 CFGetTypeID
 CFPropertyListCreateFromXMLData
 CFRelease
 CFStringGetCString
 CFURLCreateDataAndPropertiesFromResource
 CFURLCreateWithFileSystemPath
 D g_AllocError
 D g_ClockSpeed
 D g_ClockSpeedMicrosecondsMultiplier
 D g_ClockSpeedMillisecondsMultiplier
 D g_ClockSpeedSecondsMultiplier
 D g_pMemAllocSteam
 D g_pszUnknown
 D typeinfo for CStdMemAlloc
 D typeinfo for IMemAlloc
 D typeinfo for SteamThreadTools::CThread
 D vtable for CStdMemAlloc
 D vtable for SteamThreadTools::CThread
 R typeinfo name for CStdMemAlloc
 R typeinfo name for IMemAlloc
 R typeinfo name for SteamThreadTools::CThread
 T AllocateCrashMemoryReserve
 T AreStackTrackingFiltersEnabledAtStart
 T AssertMsgImplementation
 T BBlockingGetMiniDumpLock
 T BGetLocalFQDN
 T BGetMiniDumpLock
 T BWritingFatalMiniDump
 T BWritingMiniDump
 T BWritingNonFatalMiniDump
 T CCrashHandlerScope::~CCrashHandlerScope()
 T CDbgFmtSafeImplT<false>::CDbgFmtSafeImplT(DbgFmtFatalMsgTag_t*, char const*, ...)
 T CDbgFmtSafeImplT<false>::CDbgFmtSafeImplT(char const*, ...)
 T CDbgFmtSafeImplT<true>::CDbgFmtSafeImplT(DbgFmtFatalMsgTag_t*, char const*)
 T CDbgFmtSafeImplT<true>::CDbgFmtSafeImplT(char const*)
 T CFilenamesCache::FindOrCreateFilename(char const*)
 T CFilenamesCache::~CFilenamesCache()
 T CL2Cache::CL2Cache()
 T CL2Cache::End()
 T CL2Cache::Start()
 T CL2Cache::Validate(CValidator&, char const*)
 T CL2Cache::~CL2Cache()
 T CStdMemAlloc::Alloc(unsigned long)
 T CStdMemAlloc::Alloc(unsigned long, char const*, int, bool, bool)
 T CStdMemAlloc::AllocCanFail(unsigned long)
 T CStdMemAlloc::AllocCanFail(unsigned long, char const*, int, bool)
 T CStdMemAlloc::AllocTracked(unsigned long)
 T CStdMemAlloc::BIsVirtualHeapInitialized()
 T CStdMemAlloc::CStdMemAlloc()
 T CStdMemAlloc::ClearMemTrackingStats()
 T CStdMemAlloc::CompactHeap()
 T CStdMemAlloc::CompactIncremental()
 T CStdMemAlloc::ComputeMemoryUsedBy(char const*)
 T CStdMemAlloc::CpubAllocated()
 T CStdMemAlloc::CrtCheckMemory()
 T CStdMemAlloc::CrtDbgReport(int, char const*, int, char const*, char const*)
 T CStdMemAlloc::CrtIsValidHeapPointer(void const*)
 T CStdMemAlloc::CrtIsValidPointer(void const*, unsigned int, int)
 T CStdMemAlloc::CrtMemCheckpoint(_CrtMemState*)
 T CStdMemAlloc::CrtSetBreakAlloc(long)
 T CStdMemAlloc::CrtSetDbgFlag(int)
 T CStdMemAlloc::CrtSetReportFile(int, void*)
 T CStdMemAlloc::CrtSetReportHook(void*)
 T CStdMemAlloc::CrtSetReportMode(int, int)
 T CStdMemAlloc::CubAllocated()
 T CStdMemAlloc::CubAllocatedUntracked()
 T CStdMemAlloc::CubLogicalAllocated()
 T CStdMemAlloc::CubSBHAllocated()
 T CStdMemAlloc::CubSBHCommitted()
 T CStdMemAlloc::CubSBHFree()
 T CStdMemAlloc::CubSBHMinPoolFree()
 T CStdMemAlloc::DefaultFailHandler(unsigned long)
 T CStdMemAlloc::DumpMemTrackingStats(int)
 T CStdMemAlloc::DumpStats()
 T CStdMemAlloc::DumpStatsFileBase(char const*)
 T CStdMemAlloc::Expand_NoLongerSupported(void*, unsigned long)
 T CStdMemAlloc::Expand_NoLongerSupported(void*, unsigned long, char const*, int)
 T CStdMemAlloc::Free(void*, bool)
 T CStdMemAlloc::Free(void*, char const*, int, bool)
 T CStdMemAlloc::FreeTracked(void*)
 T CStdMemAlloc::GetActualDbgInfo(char const*&, int&)
 T CStdMemAlloc::GetAllocationFile(void*)
 T CStdMemAlloc::GetAllocationLine(void*)
 T CStdMemAlloc::GetFirstMemBlock()
 T CStdMemAlloc::GetNextMemBlock(void*)
 T CStdMemAlloc::GetSize(void*)
 T CStdMemAlloc::GetSize(void*, bool)
 T CStdMemAlloc::InitVirtualHeap(EVirtualHeapSize)
 T CStdMemAlloc::InternalAlloc(unsigned long, bool)
 T CStdMemAlloc::InternalAllocFromPools(unsigned long)
 T CStdMemAlloc::InternalFree(void*)
 T CStdMemAlloc::InternalRealloc(void*, unsigned long)
 T CStdMemAlloc::IsClaimed(void*)
 T CStdMemAlloc::IsDebugHeap()
 T CStdMemAlloc::IsMemLeak(void*)
 T CStdMemAlloc::IsMemLeakReported(void*)
 T CStdMemAlloc::IsMemUntracked(void*)
 T CStdMemAlloc::IsValid(void*)
 T CStdMemAlloc::MemoryAllocFailed()
 T CStdMemAlloc::OutOfMemory(unsigned long)
 T CStdMemAlloc::PopAllocDbgInfo()
 T CStdMemAlloc::PrintCallStack(void*)
 T CStdMemAlloc::PushAllocDbgInfo(char const*, int)
 T CStdMemAlloc::Realloc(void*, unsigned long)
 T CStdMemAlloc::Realloc(void*, unsigned long, char const*, int, bool)
 T CStdMemAlloc::RegisterAllocation(char const*, int, unsigned long, unsigned long, unsigned int)
 T CStdMemAlloc::RegisterDeallocation(char const*, int, unsigned long, unsigned long, unsigned int)
 T CStdMemAlloc::SetAllocFailHandler(unsigned long (*)(unsigned long))
 T CStdMemAlloc::SetBClaimed(void*, bool)
 T CStdMemAlloc::SetCRTAllocFailed(unsigned long)
 T CStdMemAlloc::SetDebugStackDumpOnAlloc(unsigned long, unsigned long, int)
 T CStdMemAlloc::SetLowFragmentationHeap()
 T CStdMemAlloc::SetMemLeakReported(void*)
 T CStdMemAlloc::SetMemUntracked(void*)
 T CStdMemAlloc::SetReleaseMemTrackingOn(int)
 T CStdMemAlloc::WalkAndAuditHeap()
 T CStdMemAlloc::heapchk()
 T CStdMemAlloc::~CStdMemAlloc()
 T CSteam3DumpHelper::ComputeBuildID(char const*, char const*)
 T CSteam3DumpHelper::ComputeExeNameFromArgv0(char const*)
 T CSteam3DumpHelper::GetProduct()
 T CSteam3DumpHelper::GetVersion()
 T CSteam3DumpHelper::Init()
 T CSteam3DumpHelper::LoadModule(char const*)
 T CSteam3DumpHelper::Shutdown()
 T CSteam3DumpHelper::~CSteam3DumpHelper()
 T CTestHarness::Init()
 T CTestHarness::RunTest(void (*)(void*), void*)
 T CTestHarness::TerminateThread()
 T CTestHarness::TestThread()
 T CTestHarness::TestThreadProxy(void*)
 T CTestHarness::YieldToMainThread()
 T CTestHarness::YieldToTestThread()
 T CTestHarness::~CTestHarness()
 T CTier0::ValidateGlobals(CValidator&)
 T CValObject::ClaimChildMemoryBlock(unsigned long)
 T CValObject::ClaimMemoryBlock(void*, unsigned long)
 T CValObject::Init(char const*, void*, char const*, CValObject*, CValObject*)
 T CValidator::AddValidationLock(SteamThreadTools::CThreadMutex*)
 T CValidator::BExcludeAllocationFromTracking(char const*, int)
 T CValidator::CValidator(int, bool)
 T CValidator::ClaimArrayMemory(void*)
 T CValidator::ClaimConnection(unsigned int)
 T CValidator::ClaimMemory(void*)
 T CValidator::ClaimMemory_Aligned(void*)
 T CValidator::ClaimOsFile(int)
 T CValidator::ClaimSocket(int)
 T CValidator::ClaimTrackedKey(CTrackItems*, void*, unsigned long*)
 T CValidator::ClaimUntrackedMemory(unsigned long)
 T CValidator::DiffAgainst(CValidator*)
 T CValidator::Finalize()
 T CValidator::FindObject(void*)
 T CValidator::IsClaimed(void*)
 T CValidator::Pop()
 T CValidator::Push(char const*, void*, char const*)
 T CValidator::RenderLeaks(unsigned long)
 T CValidator::RenderObjects(unsigned long)
 T CValidator::SetAllocSizeFilter(int)
 T CValidator::UnlockValidationLocks()
 T CValidator::Validate(CValidator&, char const*)
 T CValidator::~CValidator()
 T CalculateCPUFreq()
 T CallAssertFailedNotifyFunc
 T CallFlushLogFunc
 T CatchAndWriteContext_t::Invoke()
 T CatchAndWriteMiniDump
 T CatchAndWriteMiniDumpEx
 T CatchAndWriteMiniDumpExForVoidPtrFn
 T CatchAndWriteMiniDumpExReturnsInt
 T CatchAndWriteMiniDumpForVoidPtrFn
 T CatchAndWriteMiniDump_Impl(CatchAndWriteContext_t&)
 T CheckSSE4aTechnology()
 T ClearStackTrackingFilters
 T ClearWritingMiniDump
 T CrackSmokingCompiler
 T CrashOnPurpose()
 T CreateSimpleProcess
 T CreateVProfile
 T DLog
 T DWarning
 T DeclareCurrentThreadIsMainThread
 T DefaultSpewFunc(SpewType_t, char const*)
 T DoNewAssertDialog
 T EnableCrashingOnCrashes
 T Error
 T FindSpewGroup(char const*, int*)
 T FreeCrashMemoryReserve
 T GetAvailableRAM
 T GetCPUInformation()
 T GetCRunTimeVersion
 T GetCrashHandlerFactory
 T GetInstalledRAM
 T GetLocalHostname
 T GetMiniDumpBuildID
 T GetMiniDumpSteamID
 T GetNumberOfSpewAndLogGroups
 T GetNumberOfStackTrackingFilters
 T GetPortableSystemInformation
 T GetProcessorBrand()
 T GetProcessorDetailBlob(int*)
 T GetSpewAndLogLevel
 T GetSpewAndLogLevelByGroupIndex
 T GetSpewOutputFunc
 T GetStackTrackingFilter
 T HasStackTrackingFilters
 T HasWrittenMinidumpForFileLine(char const*, unsigned int)
 T InitPME
 T InitStackWalk()
 T InitializeStackTrackingFilters
 T Is64BitOS
 T IsInAssert
 T IsLogActive
 T IsSpewActive
 T IsStackTrackingFiltered
 T Log
 T MiniDumpUnlock
 T MinidumpValidate(CValidator&)
 T Msg
 T Plat_AbsoluteTime
 T Plat_AbsoluteTimeToFloat
 T Plat_Alloc
 T Plat_AttachDebuggerToProcess
 T Plat_CommandLineParamExists
 T Plat_CommandLineParamValue
 T Plat_DefaultAllocErrorFn
 T Plat_FloatTime
 T Plat_Free
 T Plat_GetExecutablePath
 T Plat_GetExecutablePathUTF8
 T Plat_GetProcessArgv
 T Plat_GetStackBackTrace
 T Plat_IsInDebugSession
 T Plat_IsSteamConsoleMode
 T Plat_IsSteamOS
 T Plat_MSTime
 T Plat_MSTime64
 T Plat_OutputDebugString
 T Plat_OutputDebugStringRaw
 T Plat_Realloc
 T Plat_RelativeTickFrequency
 T Plat_RelativeTicks
 T Plat_SetAllocErrorFn
 T Plat_TickAddMicroSec
 T Plat_TickDiffMicroSec
 T Plat_TickDiffMilliSec
 T Plat_USTime
 T Plat_VirtualAccessFlags
 T Plat_VirtualAlloc
 T Plat_VirtualFree
 T Plat_VirtualProtect
 T Plat_asctime
 T Plat_ctime
 T Plat_daylight
 T Plat_gmtime
 T Plat_localtime
 T Plat_timegm
 T Plat_timezone
 T RTAClearData()
 T RTANoteAlloc(void*, unsigned long, bool, char const*, int, int)
 T RTANoteFree(void*, char const*)
 T RealGetCallStack
 T RealPrintCallStack
 T RealPrintRawCallStack
 T ReapChildProcesses(int)
 T ReleaseThreadHandle
 T SetAssertDumpStack
 T SetAssertFailedNotifyFunc
 T SetFlushLogFunc
 T SetFullMemoryDumpOnCrash
 T SetInAssert
 T SetMiniDumpAppID
 T SetMiniDumpBuildID
 T SetMiniDumpSteamID
 T SetStackTrackingFilter
 T SetWritingMiniDump(bool)
 T SetWrittenMinidumpForFileLine(char const*, unsigned int)
 T ShouldUseNewAssertDialog
 T ShutdownPME
 T SpewActivate
 T SpewAndLogActivate
 T SpewAndLogChangeIfStillDefault
 T SpewChangeIfStillDefault
 T SpewOutputFunc
 T SpewWrittenMiniDumps
 T SteamThreadTools::CThread::BHasValidThreadID() const
 T SteamThreadTools::CThread::CThread()
 T SteamThreadTools::CThread::GetCurrentCThread()
 T SteamThreadTools::CThread::GetName()
 T SteamThreadTools::CThread::GetPriority() const
 T SteamThreadTools::CThread::GetResult() const
 T SteamThreadTools::CThread::GetThreadProc()
 T SteamThreadTools::CThread::Init()
 T SteamThreadTools::CThread::IsAlive() const
 T SteamThreadTools::CThread::IsThreadRunning() const
 T SteamThreadTools::CThread::Join(unsigned int)
 T SteamThreadTools::CThread::OnExit()
 T SteamThreadTools::CThread::Resume()
 T SteamThreadTools::CThread::SetName(char const*)
 T SteamThreadTools::CThread::SetPriority(int)
 T SteamThreadTools::CThread::Sleep(unsigned int)
 T SteamThreadTools::CThread::Start(unsigned long)
 T SteamThreadTools::CThread::Stop(int)
 T SteamThreadTools::CThread::Suspend()
 T SteamThreadTools::CThread::Terminate(int)
 T SteamThreadTools::CThread::ThreadExceptionWrapper(void*)
 T SteamThreadTools::CThread::ThreadProc(void*)
 T SteamThreadTools::CThread::WaitForCreateComplete(SteamThreadTools::CThreadEvent*)
 T SteamThreadTools::CThread::Yield()
 T SteamThreadTools::CThread::~CThread()
 T SteamThreadTools::CThreadEvent::CThreadEvent(bool)
 T SteamThreadTools::CThreadEvent::CThreadEvent(char const*, bool, bool)
 T SteamThreadTools::CThreadEvent::Check()
 T SteamThreadTools::CThreadEvent::Reset()
 T SteamThreadTools::CThreadEvent::Set()
 T SteamThreadTools::CThreadFullMutex::CThreadFullMutex(bool, char const*, bool, bool)
 T SteamThreadTools::CThreadFullMutex::IsCreator() const
 T SteamThreadTools::CThreadFullMutex::Release()
 T SteamThreadTools::CThreadLocal<int>::~CThreadLocal()
 T SteamThreadTools::CThreadLocal<long long>::~CThreadLocal()
 T SteamThreadTools::CThreadLocalBase::CThreadLocalBase()
 T SteamThreadTools::CThreadLocalBase::Get() const
 T SteamThreadTools::CThreadLocalBase::Set(void*)
 T SteamThreadTools::CThreadLocalBase::~CThreadLocalBase()
 T SteamThreadTools::CThreadLocalInt<int>::~CThreadLocalInt()
 T SteamThreadTools::CThreadLocalInt<long long>::~CThreadLocalInt()
 T SteamThreadTools::CThreadLocalPtr<SteamThreadTools::CThread>::~CThreadLocalPtr()
 T SteamThreadTools::CThreadLocalPtr<SteamVProf::CVProfile>::~CThreadLocalPtr()
 T SteamThreadTools::CThreadLocalStackCounter<int>::CThreadLocalStackCounter(SteamThreadTools::CThreadLocal<int>&)
 T SteamThreadTools::CThreadLocalStackCounter<int>::~CThreadLocalStackCounter()
 T SteamThreadTools::CThreadLocalStackCounter<long long>::CThreadLocalStackCounter(SteamThreadTools::CThreadLocal<long long>&)
 T SteamThreadTools::CThreadLocalStackCounter<long long>::~CThreadLocalStackCounter()
 T SteamThreadTools::CThreadMutex::CThreadMutex()
 T SteamThreadTools::CThreadMutex::~CThreadMutex()
 T SteamThreadTools::CThreadRWLock::LockForWrite()
 T SteamThreadTools::CThreadRWLock::UnlockWrite()
 T SteamThreadTools::CThreadRWLock::WaitForRead()
 T SteamThreadTools::CThreadSemaphore::CThreadSemaphore(long, long)
 T SteamThreadTools::CThreadSemaphore::Release(long)
 T SteamThreadTools::CThreadSpinLock::Lock(unsigned int) volatile
 T SteamThreadTools::CThreadSpinLock::~CThreadSpinLock()
 T SteamThreadTools::CThreadSyncObject::AcquireSemaphoreInternal(unsigned int)
 T SteamThreadTools::CThreadSyncObject::AssertUseable()
 T SteamThreadTools::CThreadSyncObject::CThreadSyncObject()
 T SteamThreadTools::CThreadSyncObject::CloseSemaphoreInternal(int, bool, char const*)
 T SteamThreadTools::CThreadSyncObject::CreateAnonymousSyncObjectInternal(bool, bool)
 T SteamThreadTools::CThreadSyncObject::CreateSemaphoreInternal(char const*, long, bool, bool*)
 T SteamThreadTools::CThreadSyncObject::EnsureSemaphoreClearedInternal(int)
 T SteamThreadTools::CThreadSyncObject::EnsureSemaphorePostedInternal(int)
 T SteamThreadTools::CThreadSyncObject::IsSemaphoreOrphanedInternal(int, int)
 T SteamThreadTools::CThreadSyncObject::OpenSemaphoreInternal(char const*, bool)
 T SteamThreadTools::CThreadSyncObject::ReleaseSemaphoreInternal(int, long)
 T SteamThreadTools::CThreadSyncObject::SaveNameToFile(char const*)
 T SteamThreadTools::CThreadSyncObject::SignalThreadSyncObjectInternal()
 T SteamThreadTools::CThreadSyncObject::Wait(unsigned int)
 T SteamThreadTools::CThreadSyncObject::operator!() const
 T SteamThreadTools::CThreadSyncObject::~CThreadSyncObject()
 T SteamThreadTools::CreateSimpleThread(unsigned int (*)(void*), void*, unsigned int*, unsigned int)
 T SteamThreadTools::InitMainThread()
 T SteamThreadTools::ThreadShellExecuteInternal(char const*, char const*, char const*, char const*, bool)
 T SteamVProf::CVProfManager::AddProfileForThread(SteamVProf::CVProfile*, unsigned int, _opaque_pthread_t*)
 T SteamVProf::CVProfManager::GetAllThreadProfiles(SteamVProf::CVProfileArray*)
 T SteamVProf::CVProfManager::~CVProfManager()
 T SteamVProf::CVProfNode::EnterScope(void*)
 T SteamVProf::CVProfNode::ExitScope()
 T SteamVProf::CVProfNode::GetSubNode(char const*, int, EVProfBugdetGroup)
 T SteamVProf::CVProfNode::GetSubNode(char const*, int, EVProfBugdetGroup, int)
 T SteamVProf::CVProfNode::MarkFrame()
 T SteamVProf::CVProfNode::Pause()
 T SteamVProf::CVProfNode::Reset()
 T SteamVProf::CVProfNode::ResetPeak()
 T SteamVProf::CVProfNode::Resume()
 T SteamVProf::CVProfNode::SetCurFrameTime(unsigned long)
 T SteamVProf::CVProfNode::Validate(CValidator&, char const*)
 T SteamVProf::CVProfile::AddBudgetGroupName(EVProfBugdetGroup, int, char const*)
 T SteamVProf::CVProfile::BProfileHasNodesOutsideBudgetGroup_Recursive(SteamVProf::CVProfNode*, int)
 T SteamVProf::CVProfile::BudgetGroupNameToBudgetGroupID(char const*) const
 T SteamVProf::CVProfile::CVProfile()
 T SteamVProf::CVProfile::CreateBudgetGroups()
 T SteamVProf::CVProfile::Dump(char const*, ...)
 T SteamVProf::CVProfile::DumpNodes(SteamVProf::CVProfNode*, int, bool)
 T SteamVProf::CVProfile::DumpSorted(char const*, double, bool (*)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&), int)
 T SteamVProf::CVProfile::FindNode(SteamVProf::CVProfNode*, char const*)
 T SteamVProf::CVProfile::FindOrCreateCounter(char const*, SteamVProf::CounterGroup_t)
 T SteamVProf::CVProfile::FreeNodes_R(SteamVProf::CVProfNode*)
 T SteamVProf::CVProfile::GetBudgetGroupColor(EVProfBugdetGroup, int&, int&, int&, int&)
 T SteamVProf::CVProfile::GetCounterGroup(int) const
 T SteamVProf::CVProfile::GetCounterName(int) const
 T SteamVProf::CVProfile::GetCounterNameAndValue(int, int&) const
 T SteamVProf::CVProfile::GetCounterValue(int) const
 T SteamVProf::CVProfile::GetFrameTimeOutsideBudgetGroup_Recursive(SteamVProf::CVProfNode*, EVProfBugdetGroup)
 T SteamVProf::CVProfile::GetNumCounters() const
 T SteamVProf::CVProfile::GetThreadID()
 T SteamVProf::CVProfile::OutputReport(int, char const*, int)
 T SteamVProf::CVProfile::RegisterCallbackHandler(SteamVProf::IVProfileCallbackHandler*)
 T SteamVProf::CVProfile::ResetCounters(SteamVProf::CounterGroup_t)
 T SteamVProf::CVProfile::SumTimes(SteamVProf::CVProfNode*, int)
 T SteamVProf::CVProfile::SumTimes(char const*, int)
 T SteamVProf::CVProfile::Term()
 T SteamVProf::CVProfile::UnregisterCallbackHandler(SteamVProf::IVProfileCallbackHandler*)
 T SteamVProf::CVProfile::Validate(CValidator&, char const*)
 T SteamVProf::CVProfile::~CVProfile()
 T SteamVProf::CVProfileArray::~CVProfileArray()
 T SteamVProf::CVProfileThreadEntry::DeleteProfile()
 T TSListBase_Init
 T TSListBase_Pop
 T TSListBase_Push
 T TSListBase_SwapList
 T TSListBase_UnsafePeek
 T TSQueueBase_Init
 T TSQueueBase_Pop
 T TSQueueBase_Push
 T TSQueueBase_UnsafeDummy
 T TSQueueBase_UnsafePeek
 T TSQueue_PopIntoFreeList
 T TSQueue_UnsafeDebugCheck
 T TestThread_Yield
 T Test_HasFailed
 T Test_HasFinished
 T Test_IsActive
 T Test_RunFrame
 T Test_RunTest
 T Test_SetFailed
 T Test_TerminateThread
 T ThreadCloseProcess
 T ThreadFindProcessByName
 T ThreadGetCurrentHandle
 T ThreadGetCurrentId
 T ThreadGetCurrentProcessHandle
 T ThreadGetCurrentProcessId
 T ThreadGetCurrentRunningRef
 T ThreadGetPriority
 T ThreadGetProcessExitCode
 T ThreadGetProcessId
 T ThreadGetProcessListInfo
 T ThreadImplOneTimeInit
 T ThreadInMainThread
 T ThreadInterlockedAssignIf
 T ThreadInterlockedAssignIf128
 T ThreadInterlockedAssignIf64
 T ThreadInterlockedAssignPointerIf
 T ThreadInterlockedCompareExchange
 T ThreadInterlockedCompareExchange64
 T ThreadInterlockedCompareExchangePointer
 T ThreadInterlockedDecrement
 T ThreadInterlockedDecrement64
 T ThreadInterlockedExchange
 T ThreadInterlockedExchange64
 T ThreadInterlockedExchangeAdd
 T ThreadInterlockedExchangeAdd64
 T ThreadInterlockedExchangePointer
 T ThreadInterlockedIncrement
 T ThreadInterlockedIncrement64
 T ThreadIsProcessActive
 T ThreadIsProcessIdActive
 T ThreadIsThreadRunning
 T ThreadMicroSleepPOSIX
 T ThreadOpenProcess
 T ThreadSetAffinity
 T ThreadSetBackgroundPriority
 T ThreadSetDebugName
 T ThreadSetPriority
 T ThreadShellExecute
 T ThreadShellExecuteNoWindow
 T ThreadSleep
 T ThreadSpinWaitForValue
 T ThreadTerminate
 T ThreadTerminateProcessCode
 T ThreadWaitForProcessExit
 T V_pretifymem(float, int, bool)
 T ValidateSpew
 T Warning
 T WriteMiniDump
 T _DMsg
 T _DSpewMessage
 T _ExitOnFatalAssert
 T _SpewInfo
 T _SpewMessage
 T _SpewMessageType
 T _ZNSt3__16vectorIN10SteamVProf10TimeSums_tENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_
 T __clang_call_terminate
 T bool std::__1::__insertion_sort_incomplete<bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&), SteamVProf::TimeSums_t*>(SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&))
 T std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<AllocTracking_t, unsigned long>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::__unordered_map_hasher<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::hash<AllocTracking_t>, true>, std::__1::__unordered_map_equal<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::equal_to<AllocTracking_t>, true>, std::__1::allocator<std::__1::__hash_value_type<AllocTracking_t, unsigned long> > >::find<AllocTracking_t>(AllocTracking_t const&)
 T std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<int, char const*>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<int, char const*>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, char const*>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, char const*>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, char const*> > >::find<int>(int const&)
 T std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<long long, char const*>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<long long, char const*>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, char const*> > >::find<long long>(long long const&)
 T std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<void*, AllocTracking_t>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, AllocTracking_t> > >::find<void*>(void* const&)
 T std::__1::__hash_table<std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::__unordered_map_hasher<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::hash<AllocTracking_t>, true>, std::__1::__unordered_map_equal<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::equal_to<AllocTracking_t>, true>, std::__1::allocator<std::__1::__hash_value_type<AllocTracking_t, unsigned long> > >::__node_insert_unique(std::__1::__hash_node<std::__1::__hash_value_type<AllocTracking_t, unsigned long>, void*>*)
 T std::__1::__hash_table<std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::__unordered_map_hasher<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::hash<AllocTracking_t>, true>, std::__1::__unordered_map_equal<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::equal_to<AllocTracking_t>, true>, std::__1::allocator<std::__1::__hash_value_type<AllocTracking_t, unsigned long> > >::__rehash(unsigned long)
 T std::__1::__hash_table<std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::__unordered_map_hasher<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::hash<AllocTracking_t>, true>, std::__1::__unordered_map_equal<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::equal_to<AllocTracking_t>, true>, std::__1::allocator<std::__1::__hash_value_type<AllocTracking_t, unsigned long> > >::rehash(unsigned long)
 T std::__1::__hash_table<std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::__unordered_map_hasher<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::hash<AllocTracking_t>, true>, std::__1::__unordered_map_equal<AllocTracking_t, std::__1::__hash_value_type<AllocTracking_t, unsigned long>, std::__1::equal_to<AllocTracking_t>, true>, std::__1::allocator<std::__1::__hash_value_type<AllocTracking_t, unsigned long> > >::~__hash_table()
 T std::__1::__hash_table<std::__1::__hash_value_type<int, char const*>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, char const*>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, char const*>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, char const*> > >::__node_insert_unique(std::__1::__hash_node<std::__1::__hash_value_type<int, char const*>, void*>*)
 T std::__1::__hash_table<std::__1::__hash_value_type<int, char const*>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, char const*>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, char const*>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, char const*> > >::__rehash(unsigned long)
 T std::__1::__hash_table<std::__1::__hash_value_type<int, char const*>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, char const*>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, char const*>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, char const*> > >::rehash(unsigned long)
 T std::__1::__hash_table<std::__1::__hash_value_type<int, char const*>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, char const*>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, char const*>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, char const*> > >::~__hash_table()
 T std::__1::__hash_table<std::__1::__hash_value_type<long long, char const*>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, char const*> > >::__node_insert_unique(std::__1::__hash_node<std::__1::__hash_value_type<long long, char const*>, void*>*)
 T std::__1::__hash_table<std::__1::__hash_value_type<long long, char const*>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, char const*> > >::__rehash(unsigned long)
 T std::__1::__hash_table<std::__1::__hash_value_type<long long, char const*>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, char const*> > >::rehash(unsigned long)
 T std::__1::__hash_table<std::__1::__hash_value_type<long long, char const*>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, char const*> > >::~__hash_table()
 T std::__1::__hash_table<std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, AllocTracking_t> > >::__node_insert_unique(std::__1::__hash_node<std::__1::__hash_value_type<void*, AllocTracking_t>, void*>*)
 T std::__1::__hash_table<std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, AllocTracking_t> > >::__rehash(unsigned long)
 T std::__1::__hash_table<std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, AllocTracking_t> > >::clear()
 T std::__1::__hash_table<std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, AllocTracking_t> > >::erase(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<void*, AllocTracking_t>, void*>*>)
 T std::__1::__hash_table<std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, AllocTracking_t> > >::rehash(unsigned long)
 T std::__1::__hash_table<std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, AllocTracking_t> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<void*, AllocTracking_t>, void*>*>)
 T std::__1::__hash_table<std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, AllocTracking_t>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, AllocTracking_t> > >::~__hash_table()
 T std::__1::__murmur2_or_cityhash<unsigned long, 32ul>::operator()(void const*, unsigned long)
 T std::__1::__split_buffer<SteamVProf::IVProfileCallbackHandler*, std::__1::allocator<SteamVProf::IVProfileCallbackHandler*>&>::~__split_buffer()
 T std::__1::__split_buffer<SteamVProf::TimeSums_t, std::__1::allocator<SteamVProf::TimeSums_t>&>::~__split_buffer()
 T std::__1::__tree<MinidumpWritten_t, std::__1::less<MinidumpWritten_t>, std::__1::allocator<MinidumpWritten_t> >::__insert_node_at(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
 T std::__1::__tree<MinidumpWritten_t, std::__1::less<MinidumpWritten_t>, std::__1::allocator<MinidumpWritten_t> >::__insert_unique(MinidumpWritten_t const&)
 T std::__1::__tree<MinidumpWritten_t, std::__1::less<MinidumpWritten_t>, std::__1::allocator<MinidumpWritten_t> >::destroy(std::__1::__tree_node<MinidumpWritten_t, void*>*)
 T std::__1::__tree<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__map_value_compare<SteamVProf::CVProfNode*, std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::less<SteamVProf::CVProfNode*>, true>, std::__1::allocator<std::__1::__value_type<SteamVProf::CVProfNode*, double> > >::__insert_node_at(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
 T std::__1::__tree<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__map_value_compare<SteamVProf::CVProfNode*, std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::less<SteamVProf::CVProfNode*>, true>, std::__1::allocator<std::__1::__value_type<SteamVProf::CVProfNode*, double> > >::__node_insert_unique(std::__1::__tree_node<std::__1::__value_type<SteamVProf::CVProfNode*, double>, void*>*)
 T std::__1::__tree<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__map_value_compare<SteamVProf::CVProfNode*, std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::less<SteamVProf::CVProfNode*>, true>, std::__1::allocator<std::__1::__value_type<SteamVProf::CVProfNode*, double> > >::destroy(std::__1::__tree_node<std::__1::__value_type<SteamVProf::CVProfNode*, double>, void*>*)
 T std::__1::__tree<std::__1::__value_type<char const*, unsigned int>, std::__1::__map_value_compare<char const*, std::__1::__value_type<char const*, unsigned int>, std::__1::less<char const*>, true>, std::__1::allocator<std::__1::__value_type<char const*, unsigned int> > >::__insert_node_at(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
 T std::__1::__tree<std::__1::__value_type<char const*, unsigned int>, std::__1::__map_value_compare<char const*, std::__1::__value_type<char const*, unsigned int>, std::__1::less<char const*>, true>, std::__1::allocator<std::__1::__value_type<char const*, unsigned int> > >::__node_insert_unique(std::__1::__tree_node<std::__1::__value_type<char const*, unsigned int>, void*>*)
 T std::__1::__tree<std::__1::__value_type<char const*, unsigned int>, std::__1::__map_value_compare<char const*, std::__1::__value_type<char const*, unsigned int>, std::__1::less<char const*>, true>, std::__1::allocator<std::__1::__value_type<char const*, unsigned int> > >::destroy(std::__1::__tree_node<std::__1::__value_type<char const*, unsigned int>, void*>*)
 T std::__1::__tree_iterator<MinidumpWritten_t, std::__1::__tree_node<MinidumpWritten_t, void*>*, int> std::__1::__tree<MinidumpWritten_t, std::__1::less<MinidumpWritten_t>, std::__1::allocator<MinidumpWritten_t> >::find<MinidumpWritten_t>(MinidumpWritten_t const&)
 T std::__1::__tree_iterator<MinidumpWritten_t, std::__1::__tree_node<MinidumpWritten_t, void*>*, long> std::__1::__tree<MinidumpWritten_t, std::__1::less<MinidumpWritten_t>, std::__1::allocator<MinidumpWritten_t> >::find<MinidumpWritten_t>(MinidumpWritten_t const&)
 T std::__1::__tree_iterator<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__tree_node<std::__1::__value_type<SteamVProf::CVProfNode*, double>, void*>*, int> std::__1::__tree<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__map_value_compare<SteamVProf::CVProfNode*, std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::less<SteamVProf::CVProfNode*>, true>, std::__1::allocator<std::__1::__value_type<SteamVProf::CVProfNode*, double> > >::find<SteamVProf::CVProfNode*>(SteamVProf::CVProfNode* const&)
 T std::__1::__tree_iterator<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__tree_node<std::__1::__value_type<SteamVProf::CVProfNode*, double>, void*>*, long> std::__1::__tree<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__map_value_compare<SteamVProf::CVProfNode*, std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::less<SteamVProf::CVProfNode*>, true>, std::__1::allocator<std::__1::__value_type<SteamVProf::CVProfNode*, double> > >::find<SteamVProf::CVProfNode*>(SteamVProf::CVProfNode* const&)
 T std::__1::__tree_node_base<void*>*& std::__1::__tree<MinidumpWritten_t, std::__1::less<MinidumpWritten_t>, std::__1::allocator<MinidumpWritten_t> >::__find_equal<MinidumpWritten_t>(std::__1::__tree_node_base<void*>*&, MinidumpWritten_t const&)
 T std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__map_value_compare<SteamVProf::CVProfNode*, std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::less<SteamVProf::CVProfNode*>, true>, std::__1::allocator<std::__1::__value_type<SteamVProf::CVProfNode*, double> > >::__find_equal<std::__1::__value_type<SteamVProf::CVProfNode*, double> >(std::__1::__tree_node_base<void*>*&, std::__1::__value_type<SteamVProf::CVProfNode*, double> const&)
 T std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<char const*, unsigned int>, std::__1::__map_value_compare<char const*, std::__1::__value_type<char const*, unsigned int>, std::__1::less<char const*>, true>, std::__1::allocator<std::__1::__value_type<char const*, unsigned int> > >::__find_equal<std::__1::__value_type<char const*, unsigned int> >(std::__1::__tree_node_base<void*>*&, std::__1::__value_type<char const*, unsigned int> const&)
 T std::__1::__vector_base<SteamVProf::IVProfileCallbackHandler*, std::__1::allocator<SteamVProf::IVProfileCallbackHandler*> >::~__vector_base()
 T std::__1::__vector_base<SteamVProf::TimeSums_t, std::__1::allocator<SteamVProf::TimeSums_t> >::~__vector_base()
 T std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<int, char const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<int, char const*>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, char const*>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, char const*>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, char const*> > >::__insert_unique<std::__1::pair<int, char const*> >(std::__1::pair<int, char const*>&&)
 T std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<long long, char const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<long long, char const*>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, char const*>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, char const*> > >::__insert_unique<std::__1::pair<long long, char const*> >(std::__1::pair<long long, char const*>&&)
 T std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__tree_node<std::__1::__value_type<SteamVProf::CVProfNode*, double>, void*>*, int>, bool> std::__1::__tree<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__map_value_compare<SteamVProf::CVProfNode*, std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::less<SteamVProf::CVProfNode*>, true>, std::__1::allocator<std::__1::__value_type<SteamVProf::CVProfNode*, double> > >::__insert_unique<std::__1::pair<SteamVProf::CVProfNode*, double> >(std::__1::pair<SteamVProf::CVProfNode*, double>&&)
 T std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__tree_node<std::__1::__value_type<SteamVProf::CVProfNode*, double>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::__map_value_compare<SteamVProf::CVProfNode*, std::__1::__value_type<SteamVProf::CVProfNode*, double>, std::__1::less<SteamVProf::CVProfNode*>, true>, std::__1::allocator<std::__1::__value_type<SteamVProf::CVProfNode*, double> > >::__insert_unique<std::__1::pair<SteamVProf::CVProfNode*, double> >(std::__1::pair<SteamVProf::CVProfNode*, double>&&)
 T std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<char const*, unsigned int>, std::__1::__tree_node<std::__1::__value_type<char const*, unsigned int>, void*>*, int>, bool> std::__1::__tree<std::__1::__value_type<char const*, unsigned int>, std::__1::__map_value_compare<char const*, std::__1::__value_type<char const*, unsigned int>, std::__1::less<char const*>, true>, std::__1::allocator<std::__1::__value_type<char const*, unsigned int> > >::__insert_unique<std::__1::pair<char const*, unsigned int> >(std::__1::pair<char const*, unsigned int>&&)
 T std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<char const*, unsigned int>, std::__1::__tree_node<std::__1::__value_type<char const*, unsigned int>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<char const*, unsigned int>, std::__1::__map_value_compare<char const*, std::__1::__value_type<char const*, unsigned int>, std::__1::less<char const*>, true>, std::__1::allocator<std::__1::__value_type<char const*, unsigned int> > >::__insert_unique<std::__1::pair<char const*, unsigned int> >(std::__1::pair<char const*, unsigned int>&&)
 T std::__1::set<MinidumpWritten_t, std::__1::less<MinidumpWritten_t>, std::__1::allocator<MinidumpWritten_t> >::~set()
 T std::__1::unordered_map<AllocTracking_t, unsigned long, std::__1::hash<AllocTracking_t>, std::__1::equal_to<AllocTracking_t>, std::__1::allocator<std::__1::pair<AllocTracking_t const, unsigned long> > >::operator[](AllocTracking_t const&)
 T std::__1::unordered_map<void*, AllocTracking_t, std::__1::hash<void*>, std::__1::equal_to<void*>, std::__1::allocator<std::__1::pair<void* const, AllocTracking_t> > >::operator[](void* const&)
 T std::__1::unordered_map<void*, AllocTracking_t, std::__1::hash<void*>, std::__1::equal_to<void*>, std::__1::allocator<std::__1::pair<void* const, AllocTracking_t> > >::~unordered_map()
 T std::__1::vector<SteamVProf::TimeSums_t, std::__1::allocator<SteamVProf::TimeSums_t> >::allocate(unsigned long)
 T std::__1::vector<SteamVProf::TimeSums_t, std::__1::allocator<SteamVProf::TimeSums_t> >::deallocate()
 T unsigned int std::__1::__sort3<bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&), SteamVProf::TimeSums_t*>(SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&))
 T unsigned int std::__1::__sort4<bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&), SteamVProf::TimeSums_t*>(SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&))
 T unsigned int std::__1::__sort5<bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&), SteamVProf::TimeSums_t*>(SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&))
 T void std::__1::__insertion_sort_3<bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&), SteamVProf::TimeSums_t*>(SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&))
 T void std::__1::__sort<bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&), SteamVProf::TimeSums_t*>(SteamVProf::TimeSums_t*, SteamVProf::TimeSums_t*, bool (*&)(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&))
 T void std::__1::__tree_balance_after_insert<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)
 T void std::__1::__tree_left_rotate<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*)
 T void std::__1::__tree_right_rotate<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*)
 T void std::__1::vector<SteamVProf::IVProfileCallbackHandler*, std::__1::allocator<SteamVProf::IVProfileCallbackHandler*> >::__push_back_slow_path<SteamVProf::IVProfileCallbackHandler* const&>(SteamVProf::IVProfileCallbackHandler* const&)
 T void std::__1::vector<SteamVProf::TimeSums_t, std::__1::allocator<SteamVProf::TimeSums_t> >::__push_back_slow_path<SteamVProf::TimeSums_t const&>(SteamVProf::TimeSums_t const&)
 T vtune
 _DefaultRuneLocale
 _NSGetArgc
 _NSGetArgv
 _NSGetExecutablePath
 _Unwind_Resume
 __CFConstantStringClassReference
 __bzero
 __cxa_allocate_exception
 __cxa_atexit
 __cxa_begin_catch
 __cxa_end_catch
 __cxa_guard_abort
 __cxa_guard_acquire
 __cxa_guard_release
 __cxa_pure_virtual
 __cxa_rethrow
 __cxa_throw
 __divdi3
 __error
 __fixunsdfdi
 __gxx_personality_v0
 __maskrune
 __stack_chk_fail
 __stack_chk_guard
 __stderrp
 __stdoutp
 __tolower
 __udivdi3
 __umoddi3
 _exit
 asctime_r
 atoi
 b AssertMsgImplementation::s_ThreadLocalAssertMsgGuardStatic
 b AssertMsgImplementation::s_bDisableDebuggerBreak
 b BGetLocalFQDN::rgchHostname
 b CFilenamesCache::FindOrCreateFilename(char const*)::autoMutex__
 b ClearWritingMiniDump::fAsserted
 b GetCPUInformation()::pi
 b GetCRunTimeVersion::rgchVersionStr
 b GetLocalHostname::rgchHostname
 b GetMiniDumpMutex()::ThreadMutexMiniDump
 b GetMinidumpsWritten()::s_MinidumpsWritten
 b GetProcessorBrand()::CPUBrand
 b GetProcessorDetailBlob(int*)::DetailBlob
 b GetProcessorVendorId()::VendorID
 b Plat_IsSteamConsoleMode::bInited
 b Plat_IsSteamConsoleMode::bIsSteamConsole
 b RTANoteAlloc(void*, unsigned long, bool, char const*, int, int)::g_FilenamesCache
 b SetWritingMiniDump(bool)::fAsserted
 b SteamThreadTools::ThreadShellExecuteInternal(char const*, char const*, char const*, char const*, bool)::bInstalledSignalHandler
 b SteamThreadTools::g_ThreadMainThreadID
 b SteamVProf::CVProfile::FindOrCreateCounter(char const*, SteamVProf::CounterGroup_t)::dummy
 b V_pretifymem(float, int, bool)::current
 b V_pretifymem(float, int, bool)::output
 b _SpewMessageType::autoMutex__
 b _ZL6g_Info.0
 b _ZL6g_Info.1
 b _ZL6g_Info.2
 b g_DumpHelper
 b g_TickBase
 b g_TickFrequency
 b g_TickFrequencyDouble
 b g_TicksToUS
 b g_bBreak
 b g_bDumpWritten
 b g_bWriteFullMemOnCrash
 b g_bWritingFatalMinidump
 b g_bWritingNonfatalMinidump
 b g_nNumFilters
 b g_pAssertDisables
 b g_pCrashMemoryReserve
 b g_rgchStackTrackingFilters
 b guard variable for AssertMsgImplementation::s_ThreadLocalAssertMsgGuardStatic
 b guard variable for CFilenamesCache::FindOrCreateFilename(char const*)::autoMutex__
 b guard variable for GetMiniDumpMutex()::ThreadMutexMiniDump
 b guard variable for GetMinidumpsWritten()::s_MinidumpsWritten
 b guard variable for RTANoteAlloc(void*, unsigned long, bool, char const*, int, int)::g_FilenamesCache
 b guard variable for _SpewMessageType::autoMutex__
 b s_AssertFailedNotifyFunc
 b s_DefaultLevel
 b s_DefaultLogLevel
 b s_FlushLogFunc
 b s_GroupCount
 b s_LastMiniDumpTime
 b s_Line
 b s_SpewType
 b s_StdMemAlloc
 b s_bSetSigHandler
 b s_pFileName
 b s_pSpewGroups
 b sm_bAssertDumpStack
 backtrace
 backtrace_symbols
 ceilf
 chdir
 ctime_r
 d s_SpewOutputFunc
 daylight
 dladdr
 dlclose
 dlopen
 dlsym
 dyld_stub_binder
 fflush
 fork
 fprintf
 fputc
 fputs
 fputs$UNIX2003
 free
 fwrite
 fwrite$UNIX2003
 getenv
 gethostbyname
 gethostname
 getpid
 gettimeofday
 gmtime_r
 host_page_size
 host_statistics
 kCFAllocatorDefault
 kill
 kill$UNIX2003
 localtime_r
 mach_absolute_time
 mach_host_self
 mach_timebase_info
 malloc
 malloc_size
 memcmp
 memcpy
 memmove
 mmap
 mmap$UNIX2003
 mprotect
 mprotect$UNIX2003
 munmap
 munmap$UNIX2003
 nanosleep
 nanosleep$UNIX2003
 operator delete(void*)
 operator delete[](void*)
 operator new(unsigned long)
 operator new[](unsigned long)
 posix_memalign
 printf
 pthread_attr_init
 pthread_attr_setstacksize
 pthread_cancel
 pthread_cancel$UNIX2003
 pthread_cond_broadcast
 pthread_cond_destroy
 pthread_cond_init
 pthread_cond_init$UNIX2003
 pthread_cond_signal
 pthread_cond_timedwait_relative_np
 pthread_cond_wait
 pthread_cond_wait$UNIX2003
 pthread_condattr_destroy
 pthread_condattr_init
 pthread_create
 pthread_exit
 pthread_getspecific
 pthread_join
 pthread_join$UNIX2003
 pthread_key_create
 pthread_key_delete
 pthread_kill
 pthread_mach_thread_np
 pthread_mutex_destroy
 pthread_mutex_init
 pthread_mutex_lock
 pthread_mutex_trylock
 pthread_mutex_unlock
 pthread_mutexattr_destroy
 pthread_mutexattr_destroy$UNIX2003
 pthread_mutexattr_init
 pthread_mutexattr_settype
 pthread_self
 pthread_setspecific
 r SteamVProf::g_ColorLookup
 r crc32(unsigned int, void const*, unsigned long)::s_crc32
 realloc
 sched_yield
 semctl
 semctl$UNIX2003
 semget
 semop
 setsid
 sigaction
 signal
 sigprocmask
 snprintf
 sscanf
 stat$INODE64
 std::__1::__next_prime(unsigned long)
 std::__1::__vector_base_common<true>::__throw_length_error() const
 std::terminate()
 strcasecmp
 strchr
 strcmp
 strcpy
 strerror
 strerror$UNIX2003
 strlen
 strncasecmp
 strncpy
 strrchr
 strstr
 sysctl
 sysctlnametomib
 system
 system$UNIX2003
 t GetMiniDumpMutex()
 t GetMinidumpsWritten()
 t InitTicks()
 t ProcessRawStack(void**, int, int, CStack&)
 t SteamThreadTools::ThreadProcConvert(void*)
 t SteamVProf::AverageTimeCompare(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&)
 t SteamVProf::AverageTimeLessChildrenCompare(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&)
 t SteamVProf::PeakCompare(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&)
 t SteamVProf::PeakOverAverageCompare(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&)
 t SteamVProf::TimeCompare(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&)
 t SteamVProf::TimeLessChildrenCompare(SteamVProf::TimeSums_t const&, SteamVProf::TimeSums_t const&)
 t TSQueueBase_PopInternal(TSLHead_t*, unsigned long, unsigned long, unsigned int*)
 t TSQueueBase_PopInternal(TSLHead_t*, unsigned long, unsigned long, unsigned long long*)
 t TSQueueBase_PopInternal_StackAlloc(TSLHead_t*, unsigned long, unsigned long, void*)
 t WriteMiniDumpThread(void*)
 t _GLOBAL__sub_I_fasttimer.cpp
 t _GLOBAL__sub_I_memstd.cpp
 t _GLOBAL__sub_I_minidump.cpp
 t _GLOBAL__sub_I_platformtime.cpp
 t _GLOBAL__sub_I_testthread.cpp
 t _GLOBAL__sub_I_threadtools.cpp
 t _GLOBAL__sub_I_vprof.cpp
 t bool std::__1::__insertion_sort_incomplete<std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*>(CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&)
 t crc32(unsigned int, void const*, unsigned long)
 t global constructors keyed to 000101
 t global constructors keyed to 000200
 t std::__1::__split_buffer<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, std::__1::allocator<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&>::~__split_buffer()
 t unsigned int std::__1::__sort3<std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*>(CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&)
 t unsigned int std::__1::__sort4<std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*>(CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&)
 t unsigned int std::__1::__sort5<std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*>(CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&)
 t void std::__1::__sort<std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*>(CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t*, std::__1::__less<CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t, CStdMemAlloc::DumpMemTrackingStats(int)::AllocSpewData_t>&)
 time
 timegm
 timezone
 timezone$UNIX2003
 typeinfo for int
 usleep
 usleep$UNIX2003
 vfprintf
 vsnprintf
 vtable for __cxxabiv1::__class_type_info
 vtable for __cxxabiv1::__si_class_type_info
 waitpid
 waitpid$UNIX2003
